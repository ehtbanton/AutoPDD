{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/anton/source/repos/AutoPDD/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst Card = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>(({ className, ...props }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    className={cn(\r\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nCard.displayName = \"Card\"\r\n\r\nconst CardHeader = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>(({ className, ...props }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\r\n    {...props}\r\n  />\r\n))\r\nCardHeader.displayName = \"CardHeader\"\r\n\r\nconst CardTitle = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>(({ className, ...props }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    className={cn(\r\n      \"text-2xl font-semibold leading-none tracking-tight\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nCardTitle.displayName = \"CardTitle\"\r\n\r\nconst CardDescription = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>(({ className, ...props }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    className={cn(\"text-sm text-muted-foreground\", className)}\r\n    {...props}\r\n  />\r\n))\r\nCardDescription.displayName = \"CardDescription\"\r\n\r\nconst CardContent = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>(({ className, ...props }, ref) => (\r\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\r\n))\r\nCardContent.displayName = \"CardContent\"\r\n\r\nconst CardFooter = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>(({ className, ...props }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    className={cn(\"flex items-center p-6 pt-0\", className)}\r\n    {...props}\r\n  />\r\n))\r\nCardFooter.displayName = \"CardFooter\"\r\n\r\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\r\n"],"names":[],"mappings":";;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAG1B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGrC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,SAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 110, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/anton/source/repos/AutoPDD/src/components/ui/scroll-area.tsx"],"sourcesContent":["\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst ScrollArea = React.forwardRef<\r\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\r\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\r\n>(({ className, children, ...props }, ref) => (\r\n  <ScrollAreaPrimitive.Root\r\n    ref={ref}\r\n    className={cn(\"relative overflow-hidden\", className)}\r\n    {...props}\r\n  >\r\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\r\n      {children}\r\n    </ScrollAreaPrimitive.Viewport>\r\n    <ScrollBar />\r\n    <ScrollAreaPrimitive.Corner />\r\n  </ScrollAreaPrimitive.Root>\r\n))\r\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\r\n\r\nconst ScrollBar = React.forwardRef<\r\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\r\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\r\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\r\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\r\n    ref={ref}\r\n    orientation={orientation}\r\n    className={cn(\r\n      \"flex touch-none select-none transition-colors\",\r\n      orientation === \"vertical\" &&\r\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\r\n      orientation === \"horizontal\" &&\r\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\r\n      className\r\n    )}\r\n    {...props}\r\n  >\r\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\r\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\r\n))\r\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\r\n\r\nexport { ScrollArea, ScrollBar }\r\n"],"names":[],"mappings":";;;;;AAEA;AACA;AAEA;AALA;;;;;AAOA,MAAM,2BAAa,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAGhC,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,OAAO,EAAE,oBACpC,6LAAC,6KAAA,CAAA,OAAwB;QACvB,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,4BAA4B;QACzC,GAAG,KAAK;;0BAET,6LAAC,6KAAA,CAAA,WAA4B;gBAAC,WAAU;0BACrC;;;;;;0BAEH,6LAAC;;;;;0BACD,6LAAC,6KAAA,CAAA,SAA0B;;;;;;;;;;;;AAG/B,WAAW,WAAW,GAAG,6KAAA,CAAA,OAAwB,CAAC,WAAW;AAE7D,MAAM,0BAAY,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,cAAc,UAAU,EAAE,GAAG,OAAO,EAAE,oBACpD,6LAAC,6KAAA,CAAA,sBAAuC;QACtC,KAAK;QACL,aAAa;QACb,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,iDACA,gBAAgB,cACd,sDACF,gBAAgB,gBACd,wDACF;QAED,GAAG,KAAK;kBAET,cAAA,6LAAC,6KAAA,CAAA,kBAAmC;YAAC,WAAU;;;;;;;;;;;MAjB7C;AAoBN,UAAU,WAAW,GAAG,6KAAA,CAAA,sBAAuC,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 187, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/anton/source/repos/AutoPDD/src/components/template-editor.tsx"],"sourcesContent":["\r\n\"use client\";\r\n\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { ScrollArea } from '@/components/ui/scroll-area';\r\nimport { FileUp, FileText } from 'lucide-react';\r\n\r\ninterface TemplateEditorProps {\r\n  content: string;\r\n}\r\n\r\nexport function TemplateEditor({ content }: TemplateEditorProps) {\r\n  return (\r\n    <Card className=\"h-full flex flex-col flex-grow min-h-0\">\r\n      <CardHeader className=\"p-4\">\r\n        <CardTitle className=\"font-headline text-xl flex items-center gap-2\">\r\n            <FileText className=\"w-6 h-6 text-primary\" />\r\n            Output Document\r\n        </CardTitle>\r\n      </CardHeader>\r\n      <CardContent className=\"flex-grow flex flex-col min-h-0 p-0 px-4 pb-4\">\r\n        <ScrollArea className=\"flex-grow rounded-md border bg-white\">\r\n          {content ? (\r\n            <div\r\n              className=\"prose max-w-none p-4\"\r\n              dangerouslySetInnerHTML={{ __html: content }}\r\n            />\r\n          ) : (\r\n            <div className=\"flex flex-col items-center justify-center h-full text-muted-foreground\">\r\n              <FileUp className=\"w-12 h-12 mb-4\" />\r\n              <p className=\"text-sm\">Upload a template on the left to get started...</p>\r\n              <p className=\"text-xs mt-1\">The generated document will appear here.</p>\r\n            </div>\r\n          )}\r\n        </ScrollArea>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;AAGA;AACA;AACA;AAAA;AAJA;;;;;AAUO,SAAS,eAAe,EAAE,OAAO,EAAuB;IAC7D,qBACE,6LAAC,mIAAA,CAAA,OAAI;QAAC,WAAU;;0BACd,6LAAC,mIAAA,CAAA,aAAU;gBAAC,WAAU;0BACpB,cAAA,6LAAC,mIAAA,CAAA,YAAS;oBAAC,WAAU;;sCACjB,6LAAC,iNAAA,CAAA,WAAQ;4BAAC,WAAU;;;;;;wBAAyB;;;;;;;;;;;;0BAInD,6LAAC,mIAAA,CAAA,cAAW;gBAAC,WAAU;0BACrB,cAAA,6LAAC,6IAAA,CAAA,aAAU;oBAAC,WAAU;8BACnB,wBACC,6LAAC;wBACC,WAAU;wBACV,yBAAyB;4BAAE,QAAQ;wBAAQ;;;;;6CAG7C,6LAAC;wBAAI,WAAU;;0CACb,6LAAC,6MAAA,CAAA,SAAM;gCAAC,WAAU;;;;;;0CAClB,6LAAC;gCAAE,WAAU;0CAAU;;;;;;0CACvB,6LAAC;gCAAE,WAAU;0CAAe;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAO1C;KA3BgB","debugId":null}},
    {"offset": {"line": 302, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/anton/source/repos/AutoPDD/src/components/context-viewer.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport type { ContextFile } from '@/app/page';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { FileQuestion } from 'lucide-react';\r\n\r\n// Core viewer\r\nimport { Viewer, Worker } from '@react-pdf-viewer/core';\r\n\r\n// Import the styles\r\nimport '@react-pdf-viewer/core/lib/styles/index.css';\r\n\r\n// Get the pdfjs-dist version\r\nimport { version } from 'pdfjs-dist/package.json';\r\n\r\ninterface ContextViewerProps {\r\n    contextFile: ContextFile | undefined;\r\n}\r\n\r\nexport function ContextViewer({ contextFile }: ContextViewerProps) {\r\n    // The workerUrl specifies where to load the PDF worker script from.\r\n    // We use unpkg to get it from the installed pdfjs-dist version.\r\n    const workerUrl = `//unpkg.com/pdfjs-dist@${version}/build/pdf.worker.min.mjs`;\r\n\r\n    return (\r\n        <Card className=\"flex-grow flex flex-col min-h-0\">\r\n            <CardHeader className=\"p-4\">\r\n                <CardTitle className=\"font-headline flex items-center gap-2 text-xl\">\r\n                    Context:\r\n                    <span className=\"text-muted-foreground font-normal text-base\">\r\n                        {contextFile?.name || 'No file selected'}\r\n                    </span>\r\n                </CardTitle>\r\n            </CardHeader>\r\n            <CardContent className=\"flex-grow p-0 px-4 pb-4\">\r\n                <div className=\"rounded-md border bg-white w-full h-full overflow-hidden\">\r\n                    {contextFile ? (\r\n                        // The Worker component is required to render the PDF.\r\n                        <Worker workerUrl={workerUrl}>\r\n                            <Viewer fileUrl={contextFile.content} />\r\n                        </Worker>\r\n                    ) : (\r\n                        // This is the placeholder shown when no file is selected.\r\n                        <div className=\"flex flex-col items-center justify-center h-full text-muted-foreground p-4 text-center\">\r\n                            <FileQuestion className=\"w-8 h-8 mb-2\" />\r\n                            <p className=\"text-xs font-semibold\">No context file selected</p>\r\n                            <p className=\"text-xs mt-1\">Upload or select a file to view its content.</p>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n}"],"names":[],"mappings":";;;;AAGA;AACA;AAEA,cAAc;AACd;AAKA,6BAA6B;AAC7B;AAbA;;;;;;;AAmBO,SAAS,cAAc,EAAE,WAAW,EAAsB;IAC7D,oEAAoE;IACpE,gEAAgE;IAChE,MAAM,YAAY,CAAC,uBAAuB,EAAE,gHAAA,CAAA,UAAO,CAAC,yBAAyB,CAAC;IAE9E,qBACI,6LAAC,mIAAA,CAAA,OAAI;QAAC,WAAU;;0BACZ,6LAAC,mIAAA,CAAA,aAAU;gBAAC,WAAU;0BAClB,cAAA,6LAAC,mIAAA,CAAA,YAAS;oBAAC,WAAU;;wBAAgD;sCAEjE,6LAAC;4BAAK,WAAU;sCACX,aAAa,QAAQ;;;;;;;;;;;;;;;;;0BAIlC,6LAAC,mIAAA,CAAA,cAAW;gBAAC,WAAU;0BACnB,cAAA,6LAAC;oBAAI,WAAU;8BACV,cACG,sDAAsD;kCACtD,6LAAC,mKAAA,CAAA,SAAM;wBAAC,WAAW;kCACf,cAAA,6LAAC,mKAAA,CAAA,SAAM;4BAAC,SAAS,YAAY,OAAO;;;;;;;;;;+BAGxC,0DAA0D;kCAC1D,6LAAC;wBAAI,WAAU;;0CACX,6LAAC,yNAAA,CAAA,eAAY;gCAAC,WAAU;;;;;;0CACxB,6LAAC;gCAAE,WAAU;0CAAwB;;;;;;0CACrC,6LAAC;gCAAE,WAAU;0CAAe;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOxD;KAlCgB","debugId":null}},
    {"offset": {"line": 431, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/anton/source/repos/AutoPDD/src/components/ui/separator.tsx"],"sourcesContent":["\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst Separator = React.forwardRef<\r\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\r\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\r\n>(\r\n  (\r\n    { className, orientation = \"horizontal\", decorative = true, ...props },\r\n    ref\r\n  ) => (\r\n    <SeparatorPrimitive.Root\r\n      ref={ref}\r\n      decorative={decorative}\r\n      orientation={orientation}\r\n      className={cn(\r\n        \"shrink-0 bg-border\",\r\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  )\r\n)\r\nSeparator.displayName = SeparatorPrimitive.Root.displayName\r\n\r\nexport { Separator }\r\n"],"names":[],"mappings":";;;;AAEA;AACA;AAEA;AALA;;;;;AAOA,MAAM,0BAAY,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAI/B,CACE,EAAE,SAAS,EAAE,cAAc,YAAY,EAAE,aAAa,IAAI,EAAE,GAAG,OAAO,EACtE,oBAEA,6LAAC,wKAAA,CAAA,OAAuB;QACtB,KAAK;QACL,YAAY;QACZ,aAAa;QACb,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,sBACA,gBAAgB,eAAe,mBAAmB,kBAClD;QAED,GAAG,KAAK;;;;;;;AAIf,UAAU,WAAW,GAAG,wKAAA,CAAA,OAAuB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 469, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/anton/source/repos/AutoPDD/src/components/console-output.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { useEffect, useRef } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { ScrollArea } from '@/components/ui/scroll-area';\r\n\r\ninterface ConsoleOutputProps {\r\n  logs: string[];\r\n}\r\n\r\nexport function ConsoleOutput({ logs }: ConsoleOutputProps) {\r\n  const viewportRef = useRef<HTMLDivElement>(null);\r\n\r\n  useEffect(() => {\r\n    if (viewportRef.current) {\r\n        // Find the viewport element inside the scroll area\r\n        const viewport = viewportRef.current.querySelector(':scope > div');\r\n        if (viewport) {\r\n            viewport.scrollTop = viewport.scrollHeight;\r\n        }\r\n    }\r\n  }, [logs]);\r\n\r\n  return (\r\n    <div>\r\n       <h3 className=\"text-sm font-medium mb-1\">Console</h3>\r\n      <Card className=\"h-32\">\r\n        <ScrollArea className=\"h-full\" ref={viewportRef}>\r\n          <CardContent className=\"p-2\">\r\n            <pre className=\"text-xs whitespace-pre-wrap\">\r\n              {logs.map((log, index) => (\r\n                <code key={index} className=\"font-code block animate-in fade-in duration-300\">\r\n                  {log}\r\n                </code>\r\n              ))}\r\n            </pre>\r\n          </CardContent>\r\n        </ScrollArea>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;;;AAJA;;;;AAUO,SAAS,cAAc,EAAE,IAAI,EAAsB;;IACxD,MAAM,cAAc,CAAA,GAAA,6JAAA,CAAA,SAAM,AAAD,EAAkB;IAE3C,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;mCAAE;YACR,IAAI,YAAY,OAAO,EAAE;gBACrB,mDAAmD;gBACnD,MAAM,WAAW,YAAY,OAAO,CAAC,aAAa,CAAC;gBACnD,IAAI,UAAU;oBACV,SAAS,SAAS,GAAG,SAAS,YAAY;gBAC9C;YACJ;QACF;kCAAG;QAAC;KAAK;IAET,qBACE,6LAAC;;0BACE,6LAAC;gBAAG,WAAU;0BAA2B;;;;;;0BAC1C,6LAAC,mIAAA,CAAA,OAAI;gBAAC,WAAU;0BACd,cAAA,6LAAC,6IAAA,CAAA,aAAU;oBAAC,WAAU;oBAAS,KAAK;8BAClC,cAAA,6LAAC,mIAAA,CAAA,cAAW;wBAAC,WAAU;kCACrB,cAAA,6LAAC;4BAAI,WAAU;sCACZ,KAAK,GAAG,CAAC,CAAC,KAAK,sBACd,6LAAC;oCAAiB,WAAU;8CACzB;mCADQ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAU3B;GA/BgB;KAAA","debugId":null}},
    {"offset": {"line": 565, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/anton/source/repos/AutoPDD/src/components/ui/button.tsx"],"sourcesContent":["import * as React from \"react\"\r\nimport { Slot } from \"@radix-ui/react-slot\"\r\nimport { cva, type VariantProps } from \"class-variance-authority\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst buttonVariants = cva(\r\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\r\n        destructive:\r\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\r\n        outline:\r\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\r\n        secondary:\r\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\r\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\r\n        link: \"text-primary underline-offset-4 hover:underline\",\r\n      },\r\n      size: {\r\n        default: \"h-10 px-4 py-2\",\r\n        sm: \"h-9 rounded-md px-3\",\r\n        lg: \"h-11 rounded-md px-8\",\r\n        icon: \"h-10 w-10\",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: \"default\",\r\n      size: \"default\",\r\n    },\r\n  }\r\n)\r\n\r\nexport interface ButtonProps\r\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\r\n    VariantProps<typeof buttonVariants> {\r\n  asChild?: boolean\r\n}\r\n\r\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\r\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\r\n    const Comp = asChild ? Slot : \"button\"\r\n    return (\r\n      <Comp\r\n        className={cn(buttonVariants({ variant, size, className }))}\r\n        ref={ref}\r\n        {...props}\r\n      />\r\n    )\r\n  }\r\n)\r\nButton.displayName = \"Button\"\r\n\r\nexport { Button, buttonVariants }\r\n"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AAEA;;;;;;AAEA,MAAM,iBAAiB,CAAA,GAAA,mKAAA,CAAA,MAAG,AAAD,EACvB,4VACA;IACE,UAAU;QACR,SAAS;YACP,SAAS;YACT,aACE;YACF,SACE;YACF,WACE;YACF,OAAO;YACP,MAAM;QACR;QACA,MAAM;YACJ,SAAS;YACT,IAAI;YACJ,IAAI;YACJ,MAAM;QACR;IACF;IACA,iBAAiB;QACf,SAAS;QACT,MAAM;IACR;AACF;AASF,MAAM,uBAAS,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAC5B,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,UAAU,KAAK,EAAE,GAAG,OAAO,EAAE;IACxD,MAAM,OAAO,UAAU,mKAAA,CAAA,OAAI,GAAG;IAC9B,qBACE,6LAAC;QACC,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,eAAe;YAAE;YAAS;YAAM;QAAU;QACxD,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;;AAEF,OAAO,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 632, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/anton/source/repos/AutoPDD/src/components/file-upload-button.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { useRef } from 'react';\r\nimport { Button, type ButtonProps } from '@/components/ui/button';\r\n\r\ninterface FileUploadButtonProps extends ButtonProps {\r\n  onFileSelect: (file: File | FileList) => void;\r\n  multiple?: boolean;\r\n  accept?: string;\r\n}\r\n\r\nexport function FileUploadButton({\r\n  onFileSelect,\r\n  multiple = false,\r\n  accept,\r\n  children,\r\n  ...props\r\n}: FileUploadButtonProps) {\r\n  const fileInputRef = useRef<HTMLInputElement>(null);\r\n\r\n  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const files = event.target.files;\r\n    if (files) {\r\n      if (multiple) {\r\n        onFileSelect(files);\r\n      } else if (files.length > 0) {\r\n        onFileSelect(files[0]);\r\n      }\r\n    }\r\n    // Reset the input value to allow re-uploading the same file\r\n    event.target.value = '';\r\n  };\r\n\r\n  const handleButtonClick = () => {\r\n    fileInputRef.current?.click();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Button onClick={handleButtonClick} {...props}>\r\n        {children}\r\n      </Button>\r\n      <input\r\n        type=\"file\"\r\n        ref={fileInputRef}\r\n        onChange={handleFileChange}\r\n        className=\"hidden\"\r\n        multiple={multiple}\r\n        accept={accept}\r\n      />\r\n    </>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;AAEA;AACA;;;AAHA;;;AAWO,SAAS,iBAAiB,EAC/B,YAAY,EACZ,WAAW,KAAK,EAChB,MAAM,EACN,QAAQ,EACR,GAAG,OACmB;;IACtB,MAAM,eAAe,CAAA,GAAA,6JAAA,CAAA,SAAM,AAAD,EAAoB;IAE9C,MAAM,mBAAmB,CAAC;QACxB,MAAM,QAAQ,MAAM,MAAM,CAAC,KAAK;QAChC,IAAI,OAAO;YACT,IAAI,UAAU;gBACZ,aAAa;YACf,OAAO,IAAI,MAAM,MAAM,GAAG,GAAG;gBAC3B,aAAa,KAAK,CAAC,EAAE;YACvB;QACF;QACA,4DAA4D;QAC5D,MAAM,MAAM,CAAC,KAAK,GAAG;IACvB;IAEA,MAAM,oBAAoB;QACxB,aAAa,OAAO,EAAE;IACxB;IAEA,qBACE;;0BACE,6LAAC,qIAAA,CAAA,SAAM;gBAAC,SAAS;gBAAoB,GAAG,KAAK;0BAC1C;;;;;;0BAEH,6LAAC;gBACC,MAAK;gBACL,KAAK;gBACL,UAAU;gBACV,WAAU;gBACV,UAAU;gBACV,QAAQ;;;;;;;;AAIhB;GAzCgB;KAAA","debugId":null}},
    {"offset": {"line": 700, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/anton/source/repos/AutoPDD/src/components/ui/dropdown-menu.tsx"],"sourcesContent":["\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\r\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst DropdownMenu = DropdownMenuPrimitive.Root\r\n\r\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\r\n\r\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\r\n\r\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\r\n\r\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\r\n\r\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\r\n\r\nconst DropdownMenuSubTrigger = React.forwardRef<\r\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\r\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\r\n    inset?: boolean\r\n  }\r\n>(({ className, inset, children, ...props }, ref) => (\r\n  <DropdownMenuPrimitive.SubTrigger\r\n    ref={ref}\r\n    className={cn(\r\n      \"flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\r\n      inset && \"pl-8\",\r\n      className\r\n    )}\r\n    {...props}\r\n  >\r\n    {children}\r\n    <ChevronRight className=\"ml-auto\" />\r\n  </DropdownMenuPrimitive.SubTrigger>\r\n))\r\nDropdownMenuSubTrigger.displayName =\r\n  DropdownMenuPrimitive.SubTrigger.displayName\r\n\r\nconst DropdownMenuSubContent = React.forwardRef<\r\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\r\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\r\n>(({ className, ...props }, ref) => (\r\n  <DropdownMenuPrimitive.SubContent\r\n    ref={ref}\r\n    className={cn(\r\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nDropdownMenuSubContent.displayName =\r\n  DropdownMenuPrimitive.SubContent.displayName\r\n\r\nconst DropdownMenuContent = React.forwardRef<\r\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\r\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\r\n>(({ className, sideOffset = 4, ...props }, ref) => (\r\n  <DropdownMenuPrimitive.Portal>\r\n    <DropdownMenuPrimitive.Content\r\n      ref={ref}\r\n      sideOffset={sideOffset}\r\n      className={cn(\r\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  </DropdownMenuPrimitive.Portal>\r\n))\r\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\r\n\r\nconst DropdownMenuItem = React.forwardRef<\r\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\r\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\r\n    inset?: boolean\r\n  }\r\n>(({ className, inset, ...props }, ref) => (\r\n  <DropdownMenuPrimitive.Item\r\n    ref={ref}\r\n    className={cn(\r\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\r\n      inset && \"pl-8\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\r\n\r\nconst DropdownMenuCheckboxItem = React.forwardRef<\r\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\r\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\r\n>(({ className, children, checked, ...props }, ref) => (\r\n  <DropdownMenuPrimitive.CheckboxItem\r\n    ref={ref}\r\n    className={cn(\r\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\r\n      className\r\n    )}\r\n    checked={checked}\r\n    {...props}\r\n  >\r\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\r\n      <DropdownMenuPrimitive.ItemIndicator>\r\n        <Check className=\"h-4 w-4\" />\r\n      </DropdownMenuPrimitive.ItemIndicator>\r\n    </span>\r\n    {children}\r\n  </DropdownMenuPrimitive.CheckboxItem>\r\n))\r\nDropdownMenuCheckboxItem.displayName =\r\n  DropdownMenuPrimitive.CheckboxItem.displayName\r\n\r\nconst DropdownMenuRadioItem = React.forwardRef<\r\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\r\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\r\n>(({ className, children, ...props }, ref) => (\r\n  <DropdownMenuPrimitive.RadioItem\r\n    ref={ref}\r\n    className={cn(\r\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\r\n      className\r\n    )}\r\n    {...props}\r\n  >\r\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\r\n      <DropdownMenuPrimitive.ItemIndicator>\r\n        <Circle className=\"h-2 w-2 fill-current\" />\r\n      </DropdownMenuPrimitive.ItemIndicator>\r\n    </span>\r\n    {children}\r\n  </DropdownMenuPrimitive.RadioItem>\r\n))\r\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\r\n\r\nconst DropdownMenuLabel = React.forwardRef<\r\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\r\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\r\n    inset?: boolean\r\n  }\r\n>(({ className, inset, ...props }, ref) => (\r\n  <DropdownMenuPrimitive.Label\r\n    ref={ref}\r\n    className={cn(\r\n      \"px-2 py-1.5 text-sm font-semibold\",\r\n      inset && \"pl-8\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\r\n\r\nconst DropdownMenuSeparator = React.forwardRef<\r\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\r\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\r\n>(({ className, ...props }, ref) => (\r\n  <DropdownMenuPrimitive.Separator\r\n    ref={ref}\r\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\r\n    {...props}\r\n  />\r\n))\r\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\r\n\r\nconst DropdownMenuShortcut = ({\r\n  className,\r\n  ...props\r\n}: React.HTMLAttributes<HTMLSpanElement>) => {\r\n  return (\r\n    <span\r\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\r\n\r\nexport {\r\n  DropdownMenu,\r\n  DropdownMenuTrigger,\r\n  DropdownMenuContent,\r\n  DropdownMenuItem,\r\n  DropdownMenuCheckboxItem,\r\n  DropdownMenuRadioItem,\r\n  DropdownMenuLabel,\r\n  DropdownMenuSeparator,\r\n  DropdownMenuShortcut,\r\n  DropdownMenuGroup,\r\n  DropdownMenuPortal,\r\n  DropdownMenuSub,\r\n  DropdownMenuSubContent,\r\n  DropdownMenuSubTrigger,\r\n  DropdownMenuRadioGroup,\r\n}\r\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AANA;;;;;;AAQA,MAAM,eAAe,+KAAA,CAAA,OAA0B;AAE/C,MAAM,sBAAsB,+KAAA,CAAA,UAA6B;AAEzD,MAAM,oBAAoB,+KAAA,CAAA,QAA2B;AAErD,MAAM,qBAAqB,+KAAA,CAAA,SAA4B;AAEvD,MAAM,kBAAkB,+KAAA,CAAA,MAAyB;AAEjD,MAAM,yBAAyB,+KAAA,CAAA,aAAgC;AAE/D,MAAM,uCAAyB,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAK5C,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,OAAO,EAAE,oBAC3C,6LAAC,+KAAA,CAAA,aAAgC;QAC/B,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,0MACA,SAAS,QACT;QAED,GAAG,KAAK;;YAER;0BACD,6LAAC,yNAAA,CAAA,eAAY;gBAAC,WAAU;;;;;;;;;;;;;AAG5B,uBAAuB,WAAW,GAChC,+KAAA,CAAA,aAAgC,CAAC,WAAW;AAE9C,MAAM,uCAAyB,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAG5C,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC,+KAAA,CAAA,aAAgC;QAC/B,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,ybACA;QAED,GAAG,KAAK;;;;;;;AAGb,uBAAuB,WAAW,GAChC,+KAAA,CAAA,aAAgC,CAAC,WAAW;AAE9C,MAAM,oCAAsB,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGzC,CAAC,EAAE,SAAS,EAAE,aAAa,CAAC,EAAE,GAAG,OAAO,EAAE,oBAC1C,6LAAC,+KAAA,CAAA,SAA4B;kBAC3B,cAAA,6LAAC,+KAAA,CAAA,UAA6B;YAC5B,KAAK;YACL,YAAY;YACZ,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,ybACA;YAED,GAAG,KAAK;;;;;;;;;;;;AAIf,oBAAoB,WAAW,GAAG,+KAAA,CAAA,UAA6B,CAAC,WAAW;AAE3E,MAAM,iCAAmB,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAKtC,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,GAAG,OAAO,EAAE,oBACjC,6LAAC,+KAAA,CAAA,OAA0B;QACzB,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,qSACA,SAAS,QACT;QAED,GAAG,KAAK;;;;;;;AAGb,iBAAiB,WAAW,GAAG,+KAAA,CAAA,OAA0B,CAAC,WAAW;AAErE,MAAM,yCAA2B,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAG9C,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE,OAAO,EAAE,GAAG,OAAO,EAAE,oBAC7C,6LAAC,+KAAA,CAAA,eAAkC;QACjC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,wOACA;QAEF,SAAS;QACR,GAAG,KAAK;;0BAET,6LAAC;gBAAK,WAAU;0BACd,cAAA,6LAAC,+KAAA,CAAA,gBAAmC;8BAClC,cAAA,6LAAC,uMAAA,CAAA,QAAK;wBAAC,WAAU;;;;;;;;;;;;;;;;YAGpB;;;;;;;;AAGL,yBAAyB,WAAW,GAClC,+KAAA,CAAA,eAAkC,CAAC,WAAW;AAEhD,MAAM,sCAAwB,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,SAG3C,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,OAAO,EAAE,oBACpC,6LAAC,+KAAA,CAAA,YAA+B;QAC9B,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,wOACA;QAED,GAAG,KAAK;;0BAET,6LAAC;gBAAK,WAAU;0BACd,cAAA,6LAAC,+KAAA,CAAA,gBAAmC;8BAClC,cAAA,6LAAC,yMAAA,CAAA,SAAM;wBAAC,WAAU;;;;;;;;;;;;;;;;YAGrB;;;;;;;;AAGL,sBAAsB,WAAW,GAAG,+KAAA,CAAA,YAA+B,CAAC,WAAW;AAE/E,MAAM,kCAAoB,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,SAKvC,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,GAAG,OAAO,EAAE,oBACjC,6LAAC,+KAAA,CAAA,QAA2B;QAC1B,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,qCACA,SAAS,QACT;QAED,GAAG,KAAK;;;;;;;AAGb,kBAAkB,WAAW,GAAG,+KAAA,CAAA,QAA2B,CAAC,WAAW;AAEvE,MAAM,sCAAwB,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,SAG3C,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC,+KAAA,CAAA,YAA+B;QAC9B,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,4BAA4B;QACzC,GAAG,KAAK;;;;;;;AAGb,sBAAsB,WAAW,GAAG,+KAAA,CAAA,YAA+B,CAAC,WAAW;AAE/E,MAAM,uBAAuB,CAAC,EAC5B,SAAS,EACT,GAAG,OACmC;IACtC,qBACE,6LAAC;QACC,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,8CAA8C;QAC3D,GAAG,KAAK;;;;;;AAGf;OAVM;AAWN,qBAAqB,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 928, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/anton/source/repos/AutoPDD/src/components/controls-panel.tsx"],"sourcesContent":["\r\n\"use client\";\r\n\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Separator } from '@/components/ui/separator';\r\nimport { ConsoleOutput } from './console-output';\r\nimport { FileUploadButton } from './file-upload-button';\r\nimport { FileUp, File, ChevronDown } from 'lucide-react';\r\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from './ui/dropdown-menu';\r\nimport { Button } from './ui/button';\r\nimport type { ContextFile } from '@/app/page';\r\n\r\ninterface ControlsPanelProps {\r\n  logs: string[];\r\n  onTemplateUpload: (file: File) => void;\r\n  onContextUpload: (files: FileList) => void;\r\n  contextFiles: ContextFile[];\r\n  selectedContextFile: ContextFile | undefined;\r\n  onContextSelect: (fileName: string) => void;\r\n  onFillDocument: () => void;\r\n  isProcessing: boolean;\r\n  onStop: () => void;\r\n}\r\n\r\nexport function ControlsPanel({\r\n  logs,\r\n  onTemplateUpload,\r\n  onContextUpload,\r\n  contextFiles,\r\n  selectedContextFile,\r\n  onContextSelect,\r\n  onFillDocument,\r\n  isProcessing,\r\n  onStop,\r\n}: ControlsPanelProps) {\r\n  return (\r\n    <Card>\r\n      <CardHeader className=\"p-4\">\r\n        <CardTitle className=\"font-headline text-xl\">Controls</CardTitle>\r\n      </CardHeader>\r\n      <CardContent className=\"space-y-4 p-4 pt-0\">\r\n        <div className=\"space-y-2\">\r\n            <h3 className=\"text-sm font-medium mb-1\">1. Upload Documents</h3>\r\n            <div className=\"grid grid-cols-2 gap-2\">\r\n                <FileUploadButton\r\n                    onFileSelect={(file) => onTemplateUpload(file as File)}\r\n                    variant=\"outline\"\r\n                    accept=\".docx\"\r\n                    size=\"sm\"\r\n                >\r\n                    <FileUp className=\"mr-2 h-2 w-2\" /> Template\r\n                </FileUploadButton>\r\n                <FileUploadButton\r\n                    onFileSelect={(files) => onContextUpload(files as FileList)}\r\n                    variant=\"outline\"\r\n                    multiple\r\n                    accept=\".pdf\"\r\n                    size=\"sm\"\r\n                >\r\n                    <File className=\"mr-2 h-2 w-2\" /> Contexts\r\n                </FileUploadButton>\r\n            </div>\r\n        </div>\r\n        \r\n        <div className=\"space-y-2\">\r\n            <h3 className=\"text-sm font-medium mb-1\">2. Select Context File (Optional)</h3>\r\n            <DropdownMenu>\r\n                <DropdownMenuTrigger asChild>\r\n                    <Button variant=\"outline\" size=\"sm\" className=\"w-full justify-between\" disabled={contextFiles.length === 0}>\r\n                        <span className=\"truncate\">{selectedContextFile?.name || \"Select a file\"}</span>\r\n                        <ChevronDown className=\"h-4 w-4 flex-shrink-0\" />\r\n                    </Button>\r\n                </DropdownMenuTrigger>\r\n                <DropdownMenuContent className=\"w-[--radix-dropdown-menu-trigger-width]\">\r\n                    {contextFiles.map((file) => (\r\n                        <DropdownMenuItem key={file.name} onSelect={() => onContextSelect(file.name)}>\r\n                            {file.name}\r\n                        </DropdownMenuItem>\r\n                    ))}\r\n                </DropdownMenuContent>\r\n            </DropdownMenu>\r\n        </div>\r\n\r\n        <div className=\"space-y-2\">\r\n          <h3 className=\"text-sm font-medium mb-1\">3. Process Document</h3>\r\n          {isProcessing ? (\r\n            <div className=\"grid grid-cols-2 gap-2\">\r\n              <Button size=\"sm\" disabled>\r\n                Processing...\r\n              </Button>\r\n              <Button\r\n                variant=\"destructive\"\r\n                size=\"sm\"\r\n                onClick={onStop}\r\n              >\r\n                Stop\r\n              </Button>\r\n            </div>\r\n          ) : (\r\n            <Button onClick={onFillDocument} size=\"sm\" className=\"w-full bg-accent text-accent-foreground hover:bg-accent/90\">\r\n              Fill Document\r\n            </Button>\r\n          )}\r\n        </div>\r\n\r\n        <Separator />\r\n\r\n        <ConsoleOutput logs={logs} />\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AARA;;;;;;;;;AAuBO,SAAS,cAAc,EAC5B,IAAI,EACJ,gBAAgB,EAChB,eAAe,EACf,YAAY,EACZ,mBAAmB,EACnB,eAAe,EACf,cAAc,EACd,YAAY,EACZ,MAAM,EACa;IACnB,qBACE,6LAAC,mIAAA,CAAA,OAAI;;0BACH,6LAAC,mIAAA,CAAA,aAAU;gBAAC,WAAU;0BACpB,cAAA,6LAAC,mIAAA,CAAA,YAAS;oBAAC,WAAU;8BAAwB;;;;;;;;;;;0BAE/C,6LAAC,mIAAA,CAAA,cAAW;gBAAC,WAAU;;kCACrB,6LAAC;wBAAI,WAAU;;0CACX,6LAAC;gCAAG,WAAU;0CAA2B;;;;;;0CACzC,6LAAC;gCAAI,WAAU;;kDACX,6LAAC,iJAAA,CAAA,mBAAgB;wCACb,cAAc,CAAC,OAAS,iBAAiB;wCACzC,SAAQ;wCACR,QAAO;wCACP,MAAK;;0DAEL,6LAAC,6MAAA,CAAA,SAAM;gDAAC,WAAU;;;;;;4CAAiB;;;;;;;kDAEvC,6LAAC,iJAAA,CAAA,mBAAgB;wCACb,cAAc,CAAC,QAAU,gBAAgB;wCACzC,SAAQ;wCACR,QAAQ;wCACR,QAAO;wCACP,MAAK;;0DAEL,6LAAC,qMAAA,CAAA,OAAI;gDAAC,WAAU;;;;;;4CAAiB;;;;;;;;;;;;;;;;;;;kCAK7C,6LAAC;wBAAI,WAAU;;0CACX,6LAAC;gCAAG,WAAU;0CAA2B;;;;;;0CACzC,6LAAC,+IAAA,CAAA,eAAY;;kDACT,6LAAC,+IAAA,CAAA,sBAAmB;wCAAC,OAAO;kDACxB,cAAA,6LAAC,qIAAA,CAAA,SAAM;4CAAC,SAAQ;4CAAU,MAAK;4CAAK,WAAU;4CAAyB,UAAU,aAAa,MAAM,KAAK;;8DACrG,6LAAC;oDAAK,WAAU;8DAAY,qBAAqB,QAAQ;;;;;;8DACzD,6LAAC,uNAAA,CAAA,cAAW;oDAAC,WAAU;;;;;;;;;;;;;;;;;kDAG/B,6LAAC,+IAAA,CAAA,sBAAmB;wCAAC,WAAU;kDAC1B,aAAa,GAAG,CAAC,CAAC,qBACf,6LAAC,+IAAA,CAAA,mBAAgB;gDAAiB,UAAU,IAAM,gBAAgB,KAAK,IAAI;0DACtE,KAAK,IAAI;+CADS,KAAK,IAAI;;;;;;;;;;;;;;;;;;;;;;kCAQhD,6LAAC;wBAAI,WAAU;;0CACb,6LAAC;gCAAG,WAAU;0CAA2B;;;;;;4BACxC,6BACC,6LAAC;gCAAI,WAAU;;kDACb,6LAAC,qIAAA,CAAA,SAAM;wCAAC,MAAK;wCAAK,QAAQ;kDAAC;;;;;;kDAG3B,6LAAC,qIAAA,CAAA,SAAM;wCACL,SAAQ;wCACR,MAAK;wCACL,SAAS;kDACV;;;;;;;;;;;qDAKH,6LAAC,qIAAA,CAAA,SAAM;gCAAC,SAAS;gCAAgB,MAAK;gCAAK,WAAU;0CAA6D;;;;;;;;;;;;kCAMtH,6LAAC,wIAAA,CAAA,YAAS;;;;;kCAEV,6LAAC,0IAAA,CAAA,gBAAa;wBAAC,MAAM;;;;;;;;;;;;;;;;;;AAI7B;KAvFgB","debugId":null}},
    {"offset": {"line": 1203, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/anton/source/repos/AutoPDD/src/app/actions.ts"],"sourcesContent":["\r\n'use server';\r\n\r\nimport { spawn } from 'child_process';\r\nimport path from 'path';\r\nimport fs from 'fs/promises';\r\nimport { Buffer } from 'buffer';\r\nimport mammoth from \"mammoth\";\r\n\r\n\r\nconst UPLOAD_DIR_TEMPLATE = path.join(process.cwd(), 'src', 'backend', 'pdd_template');\r\nconst UPLOAD_DIR_CONTEXT = path.join(process.cwd(), 'src', 'backend', 'provided_documents', 'prime_road');\r\nconst UPLOAD_DIR_OUTPUT = path.join(process.cwd(), 'src', 'backend', 'auto_pdd_output');\r\nconst OUTPUT_FILE_NAME = 'AutoPDD_prime_road.docx';\r\n\r\nasync function ensureDir(dir: string) {\r\n    try {\r\n        await fs.access(dir);\r\n    } catch (error) {\r\n        await fs.mkdir(dir, { recursive: true });\r\n    }\r\n}\r\n\r\nasync function cleanDir(dir: string) {\r\n    try {\r\n        const files = await fs.readdir(dir);\r\n        for (const file of files) {\r\n            await fs.unlink(path.join(dir, file));\r\n        }\r\n    } catch (error) {\r\n        // Directory might not exist, which is fine\r\n    }\r\n}\r\n\r\nexport async function uploadTemplateFile(fileName: string, fileContentBase64: string) {\r\n    await ensureDir(UPLOAD_DIR_TEMPLATE);\r\n    await cleanDir(UPLOAD_DIR_TEMPLATE);\r\n    await ensureDir(UPLOAD_DIR_OUTPUT);\r\n    await cleanDir(UPLOAD_DIR_OUTPUT);\r\n\r\n    const templateFilePath = path.join(UPLOAD_DIR_TEMPLATE, fileName);\r\n    const buffer = Buffer.from(fileContentBase64, 'base64');\r\n    await fs.writeFile(templateFilePath, buffer);\r\n\r\n    // Also create the initial output file by copying the template\r\n    const outputFilePath = path.join(UPLOAD_DIR_OUTPUT, OUTPUT_FILE_NAME);\r\n    await fs.copyFile(templateFilePath, outputFilePath);\r\n}\r\n\r\nexport async function uploadContextFile(fileName: string, fileContentBase64: string) {\r\n    await ensureDir(UPLOAD_DIR_CONTEXT);\r\n    const filePath = path.join(UPLOAD_DIR_CONTEXT, fileName);\r\n    await fs.writeFile(filePath, Buffer.from(fileContentBase64, 'base64'));\r\n}\r\n\r\n\r\nexport async function runPythonBackend(): Promise<ReadableStream<Uint8Array>> {\r\n    \r\n    await ensureDir(UPLOAD_DIR_OUTPUT);\r\n\r\n    const stream = new ReadableStream({\r\n        start(controller) {\r\n            const pythonScriptPath = path.join(process.cwd(), 'src', 'backend', 'src', '___main.py');\r\n            \r\n            const pythonProcess = spawn('python', [pythonScriptPath], {\r\n                cwd: path.join(process.cwd(), 'src', 'backend', 'src'),\r\n                shell: true \r\n            });\r\n\r\n            pythonProcess.stdout.on('data', (data) => {\r\n                controller.enqueue(new TextEncoder().encode(data.toString()));\r\n            });\r\n\r\n            pythonProcess.stderr.on('data', (data) => {\r\n                controller.enqueue(new TextEncoder().encode(`ERROR: ${data.toString()}`));\r\n            });\r\n\r\n            pythonProcess.on('close', (code) => {\r\n                if (code !== 0) {\r\n                    controller.enqueue(new TextEncoder().encode(`\\nPython script exited with code ${code}`));\r\n                }\r\n                controller.close();\r\n            });\r\n\r\n            pythonProcess.on('error', (err) => {\r\n                controller.error(err);\r\n            });\r\n        }\r\n    });\r\n\r\n    return stream;\r\n}\r\n\r\nexport async function getOutputFileAsHtml(): Promise<string | null> {\r\n    const outputFilePath = path.join(UPLOAD_DIR_OUTPUT, OUTPUT_FILE_NAME);\r\n    try {\r\n        await fs.access(outputFilePath); // Check if file exists\r\n        const arrayBuffer = await fs.readFile(outputFilePath);\r\n        const result = await mammoth.convertToHtml({ buffer: arrayBuffer });\r\n        return result.value;\r\n    } catch (error) {\r\n        console.error(\"Error reading or converting output file:\", error);\r\n        return null; // Return null if file doesn't exist or there's an error\r\n    }\r\n}\r\n\r\nexport async function getExistingContextFiles(): Promise<{ name: string; content: string }[]> {\r\n    try {\r\n        await ensureDir(UPLOAD_DIR_CONTEXT);\r\n        const files = await fs.readdir(UPLOAD_DIR_CONTEXT);\r\n        const contextFiles = [];\r\n        for (const file of files) {\r\n            if (path.extname(file).toLowerCase() === '.pdf') {\r\n                const filePath = path.join(UPLOAD_DIR_CONTEXT, file);\r\n                const fileContent = await fs.readFile(filePath);\r\n                contextFiles.push({\r\n                    name: file,\r\n                    content: fileContent.toString('base64'),\r\n                });\r\n            }\r\n        }\r\n        return contextFiles;\r\n    } catch (error) {\r\n        console.error(\"Error reading context files:\", error);\r\n        return [];\r\n    }\r\n}\r\n\r\nexport async function getTemplateName(): Promise<string | null> {\r\n    try {\r\n        await ensureDir(UPLOAD_DIR_TEMPLATE);\r\n        const files = await fs.readdir(UPLOAD_DIR_TEMPLATE);\r\n        const templateFile = files.find(file => path.extname(file).toLowerCase() === '.docx');\r\n        return templateFile || null;\r\n    } catch (error) {\r\n        console.error(\"Error reading template directory:\", error);\r\n        return null;\r\n    }\r\n}\r\n"],"names":[],"mappings":";;;;;;IAwDsB,mBAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 1219, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/anton/source/repos/AutoPDD/src/app/actions.ts"],"sourcesContent":["\r\n'use server';\r\n\r\nimport { spawn } from 'child_process';\r\nimport path from 'path';\r\nimport fs from 'fs/promises';\r\nimport { Buffer } from 'buffer';\r\nimport mammoth from \"mammoth\";\r\n\r\n\r\nconst UPLOAD_DIR_TEMPLATE = path.join(process.cwd(), 'src', 'backend', 'pdd_template');\r\nconst UPLOAD_DIR_CONTEXT = path.join(process.cwd(), 'src', 'backend', 'provided_documents', 'prime_road');\r\nconst UPLOAD_DIR_OUTPUT = path.join(process.cwd(), 'src', 'backend', 'auto_pdd_output');\r\nconst OUTPUT_FILE_NAME = 'AutoPDD_prime_road.docx';\r\n\r\nasync function ensureDir(dir: string) {\r\n    try {\r\n        await fs.access(dir);\r\n    } catch (error) {\r\n        await fs.mkdir(dir, { recursive: true });\r\n    }\r\n}\r\n\r\nasync function cleanDir(dir: string) {\r\n    try {\r\n        const files = await fs.readdir(dir);\r\n        for (const file of files) {\r\n            await fs.unlink(path.join(dir, file));\r\n        }\r\n    } catch (error) {\r\n        // Directory might not exist, which is fine\r\n    }\r\n}\r\n\r\nexport async function uploadTemplateFile(fileName: string, fileContentBase64: string) {\r\n    await ensureDir(UPLOAD_DIR_TEMPLATE);\r\n    await cleanDir(UPLOAD_DIR_TEMPLATE);\r\n    await ensureDir(UPLOAD_DIR_OUTPUT);\r\n    await cleanDir(UPLOAD_DIR_OUTPUT);\r\n\r\n    const templateFilePath = path.join(UPLOAD_DIR_TEMPLATE, fileName);\r\n    const buffer = Buffer.from(fileContentBase64, 'base64');\r\n    await fs.writeFile(templateFilePath, buffer);\r\n\r\n    // Also create the initial output file by copying the template\r\n    const outputFilePath = path.join(UPLOAD_DIR_OUTPUT, OUTPUT_FILE_NAME);\r\n    await fs.copyFile(templateFilePath, outputFilePath);\r\n}\r\n\r\nexport async function uploadContextFile(fileName: string, fileContentBase64: string) {\r\n    await ensureDir(UPLOAD_DIR_CONTEXT);\r\n    const filePath = path.join(UPLOAD_DIR_CONTEXT, fileName);\r\n    await fs.writeFile(filePath, Buffer.from(fileContentBase64, 'base64'));\r\n}\r\n\r\n\r\nexport async function runPythonBackend(): Promise<ReadableStream<Uint8Array>> {\r\n    \r\n    await ensureDir(UPLOAD_DIR_OUTPUT);\r\n\r\n    const stream = new ReadableStream({\r\n        start(controller) {\r\n            const pythonScriptPath = path.join(process.cwd(), 'src', 'backend', 'src', '___main.py');\r\n            \r\n            const pythonProcess = spawn('python', [pythonScriptPath], {\r\n                cwd: path.join(process.cwd(), 'src', 'backend', 'src'),\r\n                shell: true \r\n            });\r\n\r\n            pythonProcess.stdout.on('data', (data) => {\r\n                controller.enqueue(new TextEncoder().encode(data.toString()));\r\n            });\r\n\r\n            pythonProcess.stderr.on('data', (data) => {\r\n                controller.enqueue(new TextEncoder().encode(`ERROR: ${data.toString()}`));\r\n            });\r\n\r\n            pythonProcess.on('close', (code) => {\r\n                if (code !== 0) {\r\n                    controller.enqueue(new TextEncoder().encode(`\\nPython script exited with code ${code}`));\r\n                }\r\n                controller.close();\r\n            });\r\n\r\n            pythonProcess.on('error', (err) => {\r\n                controller.error(err);\r\n            });\r\n        }\r\n    });\r\n\r\n    return stream;\r\n}\r\n\r\nexport async function getOutputFileAsHtml(): Promise<string | null> {\r\n    const outputFilePath = path.join(UPLOAD_DIR_OUTPUT, OUTPUT_FILE_NAME);\r\n    try {\r\n        await fs.access(outputFilePath); // Check if file exists\r\n        const arrayBuffer = await fs.readFile(outputFilePath);\r\n        const result = await mammoth.convertToHtml({ buffer: arrayBuffer });\r\n        return result.value;\r\n    } catch (error) {\r\n        console.error(\"Error reading or converting output file:\", error);\r\n        return null; // Return null if file doesn't exist or there's an error\r\n    }\r\n}\r\n\r\nexport async function getExistingContextFiles(): Promise<{ name: string; content: string }[]> {\r\n    try {\r\n        await ensureDir(UPLOAD_DIR_CONTEXT);\r\n        const files = await fs.readdir(UPLOAD_DIR_CONTEXT);\r\n        const contextFiles = [];\r\n        for (const file of files) {\r\n            if (path.extname(file).toLowerCase() === '.pdf') {\r\n                const filePath = path.join(UPLOAD_DIR_CONTEXT, file);\r\n                const fileContent = await fs.readFile(filePath);\r\n                contextFiles.push({\r\n                    name: file,\r\n                    content: fileContent.toString('base64'),\r\n                });\r\n            }\r\n        }\r\n        return contextFiles;\r\n    } catch (error) {\r\n        console.error(\"Error reading context files:\", error);\r\n        return [];\r\n    }\r\n}\r\n\r\nexport async function getTemplateName(): Promise<string | null> {\r\n    try {\r\n        await ensureDir(UPLOAD_DIR_TEMPLATE);\r\n        const files = await fs.readdir(UPLOAD_DIR_TEMPLATE);\r\n        const templateFile = files.find(file => path.extname(file).toLowerCase() === '.docx');\r\n        return templateFile || null;\r\n    } catch (error) {\r\n        console.error(\"Error reading template directory:\", error);\r\n        return null;\r\n    }\r\n}\r\n"],"names":[],"mappings":";;;;;;IAiDsB,oBAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 1235, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/anton/source/repos/AutoPDD/src/app/actions.ts"],"sourcesContent":["\r\n'use server';\r\n\r\nimport { spawn } from 'child_process';\r\nimport path from 'path';\r\nimport fs from 'fs/promises';\r\nimport { Buffer } from 'buffer';\r\nimport mammoth from \"mammoth\";\r\n\r\n\r\nconst UPLOAD_DIR_TEMPLATE = path.join(process.cwd(), 'src', 'backend', 'pdd_template');\r\nconst UPLOAD_DIR_CONTEXT = path.join(process.cwd(), 'src', 'backend', 'provided_documents', 'prime_road');\r\nconst UPLOAD_DIR_OUTPUT = path.join(process.cwd(), 'src', 'backend', 'auto_pdd_output');\r\nconst OUTPUT_FILE_NAME = 'AutoPDD_prime_road.docx';\r\n\r\nasync function ensureDir(dir: string) {\r\n    try {\r\n        await fs.access(dir);\r\n    } catch (error) {\r\n        await fs.mkdir(dir, { recursive: true });\r\n    }\r\n}\r\n\r\nasync function cleanDir(dir: string) {\r\n    try {\r\n        const files = await fs.readdir(dir);\r\n        for (const file of files) {\r\n            await fs.unlink(path.join(dir, file));\r\n        }\r\n    } catch (error) {\r\n        // Directory might not exist, which is fine\r\n    }\r\n}\r\n\r\nexport async function uploadTemplateFile(fileName: string, fileContentBase64: string) {\r\n    await ensureDir(UPLOAD_DIR_TEMPLATE);\r\n    await cleanDir(UPLOAD_DIR_TEMPLATE);\r\n    await ensureDir(UPLOAD_DIR_OUTPUT);\r\n    await cleanDir(UPLOAD_DIR_OUTPUT);\r\n\r\n    const templateFilePath = path.join(UPLOAD_DIR_TEMPLATE, fileName);\r\n    const buffer = Buffer.from(fileContentBase64, 'base64');\r\n    await fs.writeFile(templateFilePath, buffer);\r\n\r\n    // Also create the initial output file by copying the template\r\n    const outputFilePath = path.join(UPLOAD_DIR_OUTPUT, OUTPUT_FILE_NAME);\r\n    await fs.copyFile(templateFilePath, outputFilePath);\r\n}\r\n\r\nexport async function uploadContextFile(fileName: string, fileContentBase64: string) {\r\n    await ensureDir(UPLOAD_DIR_CONTEXT);\r\n    const filePath = path.join(UPLOAD_DIR_CONTEXT, fileName);\r\n    await fs.writeFile(filePath, Buffer.from(fileContentBase64, 'base64'));\r\n}\r\n\r\n\r\nexport async function runPythonBackend(): Promise<ReadableStream<Uint8Array>> {\r\n    \r\n    await ensureDir(UPLOAD_DIR_OUTPUT);\r\n\r\n    const stream = new ReadableStream({\r\n        start(controller) {\r\n            const pythonScriptPath = path.join(process.cwd(), 'src', 'backend', 'src', '___main.py');\r\n            \r\n            const pythonProcess = spawn('python', [pythonScriptPath], {\r\n                cwd: path.join(process.cwd(), 'src', 'backend', 'src'),\r\n                shell: true \r\n            });\r\n\r\n            pythonProcess.stdout.on('data', (data) => {\r\n                controller.enqueue(new TextEncoder().encode(data.toString()));\r\n            });\r\n\r\n            pythonProcess.stderr.on('data', (data) => {\r\n                controller.enqueue(new TextEncoder().encode(`ERROR: ${data.toString()}`));\r\n            });\r\n\r\n            pythonProcess.on('close', (code) => {\r\n                if (code !== 0) {\r\n                    controller.enqueue(new TextEncoder().encode(`\\nPython script exited with code ${code}`));\r\n                }\r\n                controller.close();\r\n            });\r\n\r\n            pythonProcess.on('error', (err) => {\r\n                controller.error(err);\r\n            });\r\n        }\r\n    });\r\n\r\n    return stream;\r\n}\r\n\r\nexport async function getOutputFileAsHtml(): Promise<string | null> {\r\n    const outputFilePath = path.join(UPLOAD_DIR_OUTPUT, OUTPUT_FILE_NAME);\r\n    try {\r\n        await fs.access(outputFilePath); // Check if file exists\r\n        const arrayBuffer = await fs.readFile(outputFilePath);\r\n        const result = await mammoth.convertToHtml({ buffer: arrayBuffer });\r\n        return result.value;\r\n    } catch (error) {\r\n        console.error(\"Error reading or converting output file:\", error);\r\n        return null; // Return null if file doesn't exist or there's an error\r\n    }\r\n}\r\n\r\nexport async function getExistingContextFiles(): Promise<{ name: string; content: string }[]> {\r\n    try {\r\n        await ensureDir(UPLOAD_DIR_CONTEXT);\r\n        const files = await fs.readdir(UPLOAD_DIR_CONTEXT);\r\n        const contextFiles = [];\r\n        for (const file of files) {\r\n            if (path.extname(file).toLowerCase() === '.pdf') {\r\n                const filePath = path.join(UPLOAD_DIR_CONTEXT, file);\r\n                const fileContent = await fs.readFile(filePath);\r\n                contextFiles.push({\r\n                    name: file,\r\n                    content: fileContent.toString('base64'),\r\n                });\r\n            }\r\n        }\r\n        return contextFiles;\r\n    } catch (error) {\r\n        console.error(\"Error reading context files:\", error);\r\n        return [];\r\n    }\r\n}\r\n\r\nexport async function getTemplateName(): Promise<string | null> {\r\n    try {\r\n        await ensureDir(UPLOAD_DIR_TEMPLATE);\r\n        const files = await fs.readdir(UPLOAD_DIR_TEMPLATE);\r\n        const templateFile = files.find(file => path.extname(file).toLowerCase() === '.docx');\r\n        return templateFile || null;\r\n    } catch (error) {\r\n        console.error(\"Error reading template directory:\", error);\r\n        return null;\r\n    }\r\n}\r\n"],"names":[],"mappings":";;;;;;IAkCsB,qBAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 1251, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/anton/source/repos/AutoPDD/src/app/actions.ts"],"sourcesContent":["\r\n'use server';\r\n\r\nimport { spawn } from 'child_process';\r\nimport path from 'path';\r\nimport fs from 'fs/promises';\r\nimport { Buffer } from 'buffer';\r\nimport mammoth from \"mammoth\";\r\n\r\n\r\nconst UPLOAD_DIR_TEMPLATE = path.join(process.cwd(), 'src', 'backend', 'pdd_template');\r\nconst UPLOAD_DIR_CONTEXT = path.join(process.cwd(), 'src', 'backend', 'provided_documents', 'prime_road');\r\nconst UPLOAD_DIR_OUTPUT = path.join(process.cwd(), 'src', 'backend', 'auto_pdd_output');\r\nconst OUTPUT_FILE_NAME = 'AutoPDD_prime_road.docx';\r\n\r\nasync function ensureDir(dir: string) {\r\n    try {\r\n        await fs.access(dir);\r\n    } catch (error) {\r\n        await fs.mkdir(dir, { recursive: true });\r\n    }\r\n}\r\n\r\nasync function cleanDir(dir: string) {\r\n    try {\r\n        const files = await fs.readdir(dir);\r\n        for (const file of files) {\r\n            await fs.unlink(path.join(dir, file));\r\n        }\r\n    } catch (error) {\r\n        // Directory might not exist, which is fine\r\n    }\r\n}\r\n\r\nexport async function uploadTemplateFile(fileName: string, fileContentBase64: string) {\r\n    await ensureDir(UPLOAD_DIR_TEMPLATE);\r\n    await cleanDir(UPLOAD_DIR_TEMPLATE);\r\n    await ensureDir(UPLOAD_DIR_OUTPUT);\r\n    await cleanDir(UPLOAD_DIR_OUTPUT);\r\n\r\n    const templateFilePath = path.join(UPLOAD_DIR_TEMPLATE, fileName);\r\n    const buffer = Buffer.from(fileContentBase64, 'base64');\r\n    await fs.writeFile(templateFilePath, buffer);\r\n\r\n    // Also create the initial output file by copying the template\r\n    const outputFilePath = path.join(UPLOAD_DIR_OUTPUT, OUTPUT_FILE_NAME);\r\n    await fs.copyFile(templateFilePath, outputFilePath);\r\n}\r\n\r\nexport async function uploadContextFile(fileName: string, fileContentBase64: string) {\r\n    await ensureDir(UPLOAD_DIR_CONTEXT);\r\n    const filePath = path.join(UPLOAD_DIR_CONTEXT, fileName);\r\n    await fs.writeFile(filePath, Buffer.from(fileContentBase64, 'base64'));\r\n}\r\n\r\n\r\nexport async function runPythonBackend(): Promise<ReadableStream<Uint8Array>> {\r\n    \r\n    await ensureDir(UPLOAD_DIR_OUTPUT);\r\n\r\n    const stream = new ReadableStream({\r\n        start(controller) {\r\n            const pythonScriptPath = path.join(process.cwd(), 'src', 'backend', 'src', '___main.py');\r\n            \r\n            const pythonProcess = spawn('python', [pythonScriptPath], {\r\n                cwd: path.join(process.cwd(), 'src', 'backend', 'src'),\r\n                shell: true \r\n            });\r\n\r\n            pythonProcess.stdout.on('data', (data) => {\r\n                controller.enqueue(new TextEncoder().encode(data.toString()));\r\n            });\r\n\r\n            pythonProcess.stderr.on('data', (data) => {\r\n                controller.enqueue(new TextEncoder().encode(`ERROR: ${data.toString()}`));\r\n            });\r\n\r\n            pythonProcess.on('close', (code) => {\r\n                if (code !== 0) {\r\n                    controller.enqueue(new TextEncoder().encode(`\\nPython script exited with code ${code}`));\r\n                }\r\n                controller.close();\r\n            });\r\n\r\n            pythonProcess.on('error', (err) => {\r\n                controller.error(err);\r\n            });\r\n        }\r\n    });\r\n\r\n    return stream;\r\n}\r\n\r\nexport async function getOutputFileAsHtml(): Promise<string | null> {\r\n    const outputFilePath = path.join(UPLOAD_DIR_OUTPUT, OUTPUT_FILE_NAME);\r\n    try {\r\n        await fs.access(outputFilePath); // Check if file exists\r\n        const arrayBuffer = await fs.readFile(outputFilePath);\r\n        const result = await mammoth.convertToHtml({ buffer: arrayBuffer });\r\n        return result.value;\r\n    } catch (error) {\r\n        console.error(\"Error reading or converting output file:\", error);\r\n        return null; // Return null if file doesn't exist or there's an error\r\n    }\r\n}\r\n\r\nexport async function getExistingContextFiles(): Promise<{ name: string; content: string }[]> {\r\n    try {\r\n        await ensureDir(UPLOAD_DIR_CONTEXT);\r\n        const files = await fs.readdir(UPLOAD_DIR_CONTEXT);\r\n        const contextFiles = [];\r\n        for (const file of files) {\r\n            if (path.extname(file).toLowerCase() === '.pdf') {\r\n                const filePath = path.join(UPLOAD_DIR_CONTEXT, file);\r\n                const fileContent = await fs.readFile(filePath);\r\n                contextFiles.push({\r\n                    name: file,\r\n                    content: fileContent.toString('base64'),\r\n                });\r\n            }\r\n        }\r\n        return contextFiles;\r\n    } catch (error) {\r\n        console.error(\"Error reading context files:\", error);\r\n        return [];\r\n    }\r\n}\r\n\r\nexport async function getTemplateName(): Promise<string | null> {\r\n    try {\r\n        await ensureDir(UPLOAD_DIR_TEMPLATE);\r\n        const files = await fs.readdir(UPLOAD_DIR_TEMPLATE);\r\n        const templateFile = files.find(file => path.extname(file).toLowerCase() === '.docx');\r\n        return templateFile || null;\r\n    } catch (error) {\r\n        console.error(\"Error reading template directory:\", error);\r\n        return null;\r\n    }\r\n}\r\n"],"names":[],"mappings":";;;;;;IA6FsB,sBAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 1267, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/anton/source/repos/AutoPDD/src/app/actions.ts"],"sourcesContent":["\r\n'use server';\r\n\r\nimport { spawn } from 'child_process';\r\nimport path from 'path';\r\nimport fs from 'fs/promises';\r\nimport { Buffer } from 'buffer';\r\nimport mammoth from \"mammoth\";\r\n\r\n\r\nconst UPLOAD_DIR_TEMPLATE = path.join(process.cwd(), 'src', 'backend', 'pdd_template');\r\nconst UPLOAD_DIR_CONTEXT = path.join(process.cwd(), 'src', 'backend', 'provided_documents', 'prime_road');\r\nconst UPLOAD_DIR_OUTPUT = path.join(process.cwd(), 'src', 'backend', 'auto_pdd_output');\r\nconst OUTPUT_FILE_NAME = 'AutoPDD_prime_road.docx';\r\n\r\nasync function ensureDir(dir: string) {\r\n    try {\r\n        await fs.access(dir);\r\n    } catch (error) {\r\n        await fs.mkdir(dir, { recursive: true });\r\n    }\r\n}\r\n\r\nasync function cleanDir(dir: string) {\r\n    try {\r\n        const files = await fs.readdir(dir);\r\n        for (const file of files) {\r\n            await fs.unlink(path.join(dir, file));\r\n        }\r\n    } catch (error) {\r\n        // Directory might not exist, which is fine\r\n    }\r\n}\r\n\r\nexport async function uploadTemplateFile(fileName: string, fileContentBase64: string) {\r\n    await ensureDir(UPLOAD_DIR_TEMPLATE);\r\n    await cleanDir(UPLOAD_DIR_TEMPLATE);\r\n    await ensureDir(UPLOAD_DIR_OUTPUT);\r\n    await cleanDir(UPLOAD_DIR_OUTPUT);\r\n\r\n    const templateFilePath = path.join(UPLOAD_DIR_TEMPLATE, fileName);\r\n    const buffer = Buffer.from(fileContentBase64, 'base64');\r\n    await fs.writeFile(templateFilePath, buffer);\r\n\r\n    // Also create the initial output file by copying the template\r\n    const outputFilePath = path.join(UPLOAD_DIR_OUTPUT, OUTPUT_FILE_NAME);\r\n    await fs.copyFile(templateFilePath, outputFilePath);\r\n}\r\n\r\nexport async function uploadContextFile(fileName: string, fileContentBase64: string) {\r\n    await ensureDir(UPLOAD_DIR_CONTEXT);\r\n    const filePath = path.join(UPLOAD_DIR_CONTEXT, fileName);\r\n    await fs.writeFile(filePath, Buffer.from(fileContentBase64, 'base64'));\r\n}\r\n\r\n\r\nexport async function runPythonBackend(): Promise<ReadableStream<Uint8Array>> {\r\n    \r\n    await ensureDir(UPLOAD_DIR_OUTPUT);\r\n\r\n    const stream = new ReadableStream({\r\n        start(controller) {\r\n            const pythonScriptPath = path.join(process.cwd(), 'src', 'backend', 'src', '___main.py');\r\n            \r\n            const pythonProcess = spawn('python', [pythonScriptPath], {\r\n                cwd: path.join(process.cwd(), 'src', 'backend', 'src'),\r\n                shell: true \r\n            });\r\n\r\n            pythonProcess.stdout.on('data', (data) => {\r\n                controller.enqueue(new TextEncoder().encode(data.toString()));\r\n            });\r\n\r\n            pythonProcess.stderr.on('data', (data) => {\r\n                controller.enqueue(new TextEncoder().encode(`ERROR: ${data.toString()}`));\r\n            });\r\n\r\n            pythonProcess.on('close', (code) => {\r\n                if (code !== 0) {\r\n                    controller.enqueue(new TextEncoder().encode(`\\nPython script exited with code ${code}`));\r\n                }\r\n                controller.close();\r\n            });\r\n\r\n            pythonProcess.on('error', (err) => {\r\n                controller.error(err);\r\n            });\r\n        }\r\n    });\r\n\r\n    return stream;\r\n}\r\n\r\nexport async function getOutputFileAsHtml(): Promise<string | null> {\r\n    const outputFilePath = path.join(UPLOAD_DIR_OUTPUT, OUTPUT_FILE_NAME);\r\n    try {\r\n        await fs.access(outputFilePath); // Check if file exists\r\n        const arrayBuffer = await fs.readFile(outputFilePath);\r\n        const result = await mammoth.convertToHtml({ buffer: arrayBuffer });\r\n        return result.value;\r\n    } catch (error) {\r\n        console.error(\"Error reading or converting output file:\", error);\r\n        return null; // Return null if file doesn't exist or there's an error\r\n    }\r\n}\r\n\r\nexport async function getExistingContextFiles(): Promise<{ name: string; content: string }[]> {\r\n    try {\r\n        await ensureDir(UPLOAD_DIR_CONTEXT);\r\n        const files = await fs.readdir(UPLOAD_DIR_CONTEXT);\r\n        const contextFiles = [];\r\n        for (const file of files) {\r\n            if (path.extname(file).toLowerCase() === '.pdf') {\r\n                const filePath = path.join(UPLOAD_DIR_CONTEXT, file);\r\n                const fileContent = await fs.readFile(filePath);\r\n                contextFiles.push({\r\n                    name: file,\r\n                    content: fileContent.toString('base64'),\r\n                });\r\n            }\r\n        }\r\n        return contextFiles;\r\n    } catch (error) {\r\n        console.error(\"Error reading context files:\", error);\r\n        return [];\r\n    }\r\n}\r\n\r\nexport async function getTemplateName(): Promise<string | null> {\r\n    try {\r\n        await ensureDir(UPLOAD_DIR_TEMPLATE);\r\n        const files = await fs.readdir(UPLOAD_DIR_TEMPLATE);\r\n        const templateFile = files.find(file => path.extname(file).toLowerCase() === '.docx');\r\n        return templateFile || null;\r\n    } catch (error) {\r\n        console.error(\"Error reading template directory:\", error);\r\n        return null;\r\n    }\r\n}\r\n"],"names":[],"mappings":";;;;;;IA0GsB,0BAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 1283, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/anton/source/repos/AutoPDD/src/app/actions.ts"],"sourcesContent":["\r\n'use server';\r\n\r\nimport { spawn } from 'child_process';\r\nimport path from 'path';\r\nimport fs from 'fs/promises';\r\nimport { Buffer } from 'buffer';\r\nimport mammoth from \"mammoth\";\r\n\r\n\r\nconst UPLOAD_DIR_TEMPLATE = path.join(process.cwd(), 'src', 'backend', 'pdd_template');\r\nconst UPLOAD_DIR_CONTEXT = path.join(process.cwd(), 'src', 'backend', 'provided_documents', 'prime_road');\r\nconst UPLOAD_DIR_OUTPUT = path.join(process.cwd(), 'src', 'backend', 'auto_pdd_output');\r\nconst OUTPUT_FILE_NAME = 'AutoPDD_prime_road.docx';\r\n\r\nasync function ensureDir(dir: string) {\r\n    try {\r\n        await fs.access(dir);\r\n    } catch (error) {\r\n        await fs.mkdir(dir, { recursive: true });\r\n    }\r\n}\r\n\r\nasync function cleanDir(dir: string) {\r\n    try {\r\n        const files = await fs.readdir(dir);\r\n        for (const file of files) {\r\n            await fs.unlink(path.join(dir, file));\r\n        }\r\n    } catch (error) {\r\n        // Directory might not exist, which is fine\r\n    }\r\n}\r\n\r\nexport async function uploadTemplateFile(fileName: string, fileContentBase64: string) {\r\n    await ensureDir(UPLOAD_DIR_TEMPLATE);\r\n    await cleanDir(UPLOAD_DIR_TEMPLATE);\r\n    await ensureDir(UPLOAD_DIR_OUTPUT);\r\n    await cleanDir(UPLOAD_DIR_OUTPUT);\r\n\r\n    const templateFilePath = path.join(UPLOAD_DIR_TEMPLATE, fileName);\r\n    const buffer = Buffer.from(fileContentBase64, 'base64');\r\n    await fs.writeFile(templateFilePath, buffer);\r\n\r\n    // Also create the initial output file by copying the template\r\n    const outputFilePath = path.join(UPLOAD_DIR_OUTPUT, OUTPUT_FILE_NAME);\r\n    await fs.copyFile(templateFilePath, outputFilePath);\r\n}\r\n\r\nexport async function uploadContextFile(fileName: string, fileContentBase64: string) {\r\n    await ensureDir(UPLOAD_DIR_CONTEXT);\r\n    const filePath = path.join(UPLOAD_DIR_CONTEXT, fileName);\r\n    await fs.writeFile(filePath, Buffer.from(fileContentBase64, 'base64'));\r\n}\r\n\r\n\r\nexport async function runPythonBackend(): Promise<ReadableStream<Uint8Array>> {\r\n    \r\n    await ensureDir(UPLOAD_DIR_OUTPUT);\r\n\r\n    const stream = new ReadableStream({\r\n        start(controller) {\r\n            const pythonScriptPath = path.join(process.cwd(), 'src', 'backend', 'src', '___main.py');\r\n            \r\n            const pythonProcess = spawn('python', [pythonScriptPath], {\r\n                cwd: path.join(process.cwd(), 'src', 'backend', 'src'),\r\n                shell: true \r\n            });\r\n\r\n            pythonProcess.stdout.on('data', (data) => {\r\n                controller.enqueue(new TextEncoder().encode(data.toString()));\r\n            });\r\n\r\n            pythonProcess.stderr.on('data', (data) => {\r\n                controller.enqueue(new TextEncoder().encode(`ERROR: ${data.toString()}`));\r\n            });\r\n\r\n            pythonProcess.on('close', (code) => {\r\n                if (code !== 0) {\r\n                    controller.enqueue(new TextEncoder().encode(`\\nPython script exited with code ${code}`));\r\n                }\r\n                controller.close();\r\n            });\r\n\r\n            pythonProcess.on('error', (err) => {\r\n                controller.error(err);\r\n            });\r\n        }\r\n    });\r\n\r\n    return stream;\r\n}\r\n\r\nexport async function getOutputFileAsHtml(): Promise<string | null> {\r\n    const outputFilePath = path.join(UPLOAD_DIR_OUTPUT, OUTPUT_FILE_NAME);\r\n    try {\r\n        await fs.access(outputFilePath); // Check if file exists\r\n        const arrayBuffer = await fs.readFile(outputFilePath);\r\n        const result = await mammoth.convertToHtml({ buffer: arrayBuffer });\r\n        return result.value;\r\n    } catch (error) {\r\n        console.error(\"Error reading or converting output file:\", error);\r\n        return null; // Return null if file doesn't exist or there's an error\r\n    }\r\n}\r\n\r\nexport async function getExistingContextFiles(): Promise<{ name: string; content: string }[]> {\r\n    try {\r\n        await ensureDir(UPLOAD_DIR_CONTEXT);\r\n        const files = await fs.readdir(UPLOAD_DIR_CONTEXT);\r\n        const contextFiles = [];\r\n        for (const file of files) {\r\n            if (path.extname(file).toLowerCase() === '.pdf') {\r\n                const filePath = path.join(UPLOAD_DIR_CONTEXT, file);\r\n                const fileContent = await fs.readFile(filePath);\r\n                contextFiles.push({\r\n                    name: file,\r\n                    content: fileContent.toString('base64'),\r\n                });\r\n            }\r\n        }\r\n        return contextFiles;\r\n    } catch (error) {\r\n        console.error(\"Error reading context files:\", error);\r\n        return [];\r\n    }\r\n}\r\n\r\nexport async function getTemplateName(): Promise<string | null> {\r\n    try {\r\n        await ensureDir(UPLOAD_DIR_TEMPLATE);\r\n        const files = await fs.readdir(UPLOAD_DIR_TEMPLATE);\r\n        const templateFile = files.find(file => path.extname(file).toLowerCase() === '.docx');\r\n        return templateFile || null;\r\n    } catch (error) {\r\n        console.error(\"Error reading template directory:\", error);\r\n        return null;\r\n    }\r\n}\r\n"],"names":[],"mappings":";;;;;;IAgIsB,kBAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 1299, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/anton/source/repos/AutoPDD/src/app/page.tsx"],"sourcesContent":["\r\n'use client';\r\n\r\nimport type { FC } from 'react';\r\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\r\nimport { TemplateEditor } from '@/components/template-editor';\r\nimport { ContextViewer } from '@/components/context-viewer';\r\nimport { ControlsPanel } from '@/components/controls-panel';\r\nimport { useToast } from \"@/hooks/use-toast\";\r\nimport { runPythonBackend, uploadContextFile, uploadTemplateFile, getOutputFileAsHtml, getExistingContextFiles, getTemplateName } from '@/app/actions';\r\n\r\nexport type ContextFile = {\r\n  name: string;\r\n  content: ArrayBuffer;\r\n};\r\n\r\nconst initialTemplateContent = ``;\r\n\r\nconst initialContextFiles: ContextFile[] = [];\r\n\r\nconst initialLogs = [\r\n  'Welcome to AutoPDD!',\r\n  'Upload a Word document as a template and PDF files for context.',\r\n];\r\n\r\nconst Page: FC = () => {\r\n  const [templateContent, setTemplateContent] = useState<string>(initialTemplateContent);\r\n  const [contextFiles, setContextFiles] = useState<ContextFile[]>(initialContextFiles);\r\n  const [selectedContextFile, setSelectedContextFile] = useState<ContextFile | undefined>(undefined);\r\n  const [logs, setLogs] = useState<string[]>([]);\r\n  const { toast } = useToast();\r\n  const [isProcessing, setIsProcessing] = useState(false);\r\n  const processingRef = useRef<boolean>(false);\r\n  const [templatePath, setTemplatePath] = useState<string>('');\r\n  const pollingIntervalRef = useRef<NodeJS.Timeout | null>(null);\r\n\r\n\r\n  const log = useCallback((message: string) => {\r\n    const timedMessage = `[${new Date().toLocaleTimeString()}] ${message}`;\r\n    setLogs((prevLogs) => [...prevLogs, timedMessage]);\r\n    console.log(timedMessage);\r\n  }, []);\r\n  \r\n  const updateOutputViewer = useCallback(async () => {\r\n    try {\r\n        const html = await getOutputFileAsHtml();\r\n        if (html) {\r\n            setTemplateContent(html);\r\n        }\r\n    } catch (error) {\r\n        // It might fail if the file doesn't exist yet, which is fine initially.\r\n        console.warn(\"Could not fetch output file HTML\", error);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const loadInitialData = async () => {\r\n        log(\"Checking for existing files...\");\r\n\r\n        // Check for output file\r\n        await updateOutputViewer();\r\n\r\n        // Check for template file\r\n        const templateName = await getTemplateName();\r\n        if (templateName) {\r\n            setTemplatePath(templateName);\r\n            log(`Found existing template: \"${templateName}\"`);\r\n        }\r\n        \r\n        // Check for context files\r\n        const existingContexts = await getExistingContextFiles();\r\n        if (existingContexts.length > 0) {\r\n            const files: ContextFile[] = existingContexts.map(f => {\r\n                const buffer = Buffer.from(f.content, 'base64');\r\n                return { name: f.name, content: buffer.buffer as ArrayBuffer };\r\n            });\r\n            setContextFiles(files);\r\n            setSelectedContextFile(files[0]);\r\n            log(`Loaded ${files.length} existing context file(s).`);\r\n        }\r\n    };\r\n    \r\n    setLogs(initialLogs.map(l => `[${new Date().toLocaleTimeString()}] ${l}`));\r\n    loadInitialData();\r\n  }, [log, updateOutputViewer]);\r\n\r\n\r\n\r\n  const handleTemplateUpload = async (file: File) => {\r\n    log(`Uploading template \"${file.name}\"...`);\r\n    const reader = new FileReader();\r\n    reader.onload = async (e) => {\r\n        const arrayBuffer = e.target?.result as ArrayBuffer;\r\n        const buffer = Buffer.from(arrayBuffer);\r\n\r\n        try {\r\n            // Save the file on the server and create the output doc\r\n            await uploadTemplateFile(file.name, buffer.toString('base64'));\r\n\r\n            // Update the UI by fetching the newly created output doc\r\n            await updateOutputViewer();\r\n            \r\n            setTemplatePath(file.name);\r\n            log(`Template \"${file.name}\" uploaded and output file created.`);\r\n\r\n            toast({\r\n                title: \"Upload Successful\",\r\n                description: `Template \"${file.name}\" has been loaded and output file created.`,\r\n                variant: \"default\",\r\n                className: \"bg-accent text-accent-foreground\",\r\n            });\r\n        } catch (error) {\r\n            console.error(\"Template upload error:\", error);\r\n            const errorMessage = error instanceof Error ? error.message : String(error);\r\n            log(`Error uploading template: ${errorMessage}`);\r\n            toast({\r\n                title: \"Upload Failed\",\r\n                description: \"Could not save the template file on the server.\",\r\n                variant: \"destructive\",\r\n            });\r\n        }\r\n    };\r\n    reader.onerror = () => {\r\n        log(`Error reading file: ${file.name}`);\r\n        toast({\r\n            title: \"Read Failed\",\r\n            description: `There was an error reading \"${file.name}\".`,\r\n            variant: \"destructive\",\r\n        });\r\n    };\r\n    reader.readAsArrayBuffer(file);\r\n  };\r\n\r\n  const handleContextUpload = (files: FileList) => {\r\n    log(`Attempting to upload ${files.length} context file(s)...`);\r\n    const newFiles: ContextFile[] = [];\r\n    let processedCount = 0;\r\n    const fileArray = Array.from(files);\r\n  \r\n    if (fileArray.length === 0) {\r\n      log(\"No files selected for context upload.\");\r\n      return;\r\n    }\r\n  \r\n    fileArray.forEach(file => {\r\n      const reader = new FileReader();\r\n      reader.onload = async (e) => {\r\n        const content = e.target?.result as ArrayBuffer;\r\n        \r\n        try {\r\n            // Save file on the server\r\n            const buffer = Buffer.from(content);\r\n            await uploadContextFile(file.name, buffer.toString('base64'));\r\n            log(`Successfully uploaded and saved \"${file.name}\".`);\r\n\r\n            // Update UI state\r\n            const contentCopy = content.slice(0);\r\n            const newFile = { name: file.name, content: contentCopy };\r\n            newFiles.push(newFile);\r\n\r\n        } catch (error) {\r\n            console.error(`Error uploading context file \"${file.name}\":`, error);\r\n            const errorMessage = error instanceof Error ? error.message : String(error);\r\n            log(`Error uploading file \"${file.name}\": ${errorMessage}`);\r\n            toast({\r\n                title: \"Upload Failed\",\r\n                description: `Could not save \"${file.name}\" on the server.`,\r\n                variant: \"destructive\",\r\n            });\r\n        }\r\n\r\n        processedCount++;\r\n        if (processedCount === fileArray.length) {\r\n            if (newFiles.length > 0) {\r\n                setContextFiles(prevFiles => {\r\n                    const updatedFiles = [...prevFiles];\r\n                    newFiles.forEach(newFile => {\r\n                        const existingIndex = updatedFiles.findIndex(f => f.name === newFile.name);\r\n                        if (existingIndex !== -1) {\r\n                            log(`Replacing existing file in UI: \"${newFile.name}\"`);\r\n                            updatedFiles[existingIndex] = newFile;\r\n                        } else {\r\n                            updatedFiles.push(newFile);\r\n                        }\r\n                    });\r\n                    return updatedFiles;\r\n                });\r\n\r\n                if (!selectedContextFile) {\r\n                    setSelectedContextFile(newFiles[0]);\r\n                }\r\n                \r\n                log(`${newFiles.length} context file(s) processed for UI.`);\r\n                toast({\r\n                    title: \"Upload Complete\",\r\n                    description: `${newFiles.length} context file(s) have been loaded.`,\r\n                    variant: \"default\",\r\n                    className: \"bg-accent text-accent-foreground\",\r\n                });\r\n            } else {\r\n                 log(`No new context files were successfully uploaded.`);\r\n            }\r\n        }\r\n      };\r\n      reader.onerror = (error) => {\r\n        log(`Error reading file \"${file.name}\": ${error}`);\r\n        toast({\r\n            title: \"Upload Failed\",\r\n            description: `There was an error reading \"${file.name}\".`,\r\n            variant: \"destructive\",\r\n        });\r\n        processedCount++;\r\n      }\r\n      reader.readAsArrayBuffer(file);\r\n    });\r\n  };\r\n  \r\n  const handleContextSelect = (fileName: string) => {\r\n    const file = contextFiles.find(f => f.name === fileName);\r\n    setSelectedContextFile(file);\r\n    if(file) {\r\n        log(`Context file \"${fileName}\" selected.`);\r\n    }\r\n  }\r\n\r\n  const handleFillDocument = async () => {\r\n    if (!templatePath) {\r\n        log(\"Error: Please upload a template document first.\");\r\n        toast({\r\n            title: \"Template Missing\",\r\n            description: \"You must upload a template .docx file before filling the document.\",\r\n            variant: \"destructive\",\r\n        });\r\n        return;\r\n    }\r\n\r\n    log(\"Starting document processing with Python backend...\");\r\n    setIsProcessing(true);\r\n    processingRef.current = true;\r\n\r\n    // Start polling for updates\r\n    pollingIntervalRef.current = setInterval(updateOutputViewer, 3000); // Poll every 3 seconds\r\n\r\n    try {\r\n        const stream = await runPythonBackend();\r\n        const reader = stream.getReader();\r\n        const decoder = new TextDecoder();\r\n\r\n        while (processingRef.current) {\r\n            const { value, done } = await reader.read();\r\n            if (done) {\r\n                log(\"Python script finished.\");\r\n                break;\r\n            }\r\n            const decodedChunk = decoder.decode(value, { stream: true });\r\n            const lines = decodedChunk.split('\\n').filter(line => line.trim() !== '');\r\n            for (const line of lines) {\r\n                log(line);\r\n            }\r\n        }\r\n        if(!processingRef.current) {\r\n            log(\"Processing stopped by user.\");\r\n        }\r\n\r\n    } catch (error) {\r\n        console.error(\"Error running python backend: \", error);\r\n        const errorMessage = error instanceof Error ? error.message : String(error);\r\n        log(`Error: ${errorMessage}`);\r\n        toast({\r\n            title: \"Backend Error\",\r\n            description: \"The Python script failed to run. Check the console for details.\",\r\n            variant: \"destructive\",\r\n        });\r\n    } finally {\r\n        setIsProcessing(false);\r\n        processingRef.current = false;\r\n        if (pollingIntervalRef.current) {\r\n            clearInterval(pollingIntervalRef.current);\r\n            pollingIntervalRef.current = null;\r\n        }\r\n        // Final update after processing is finished\r\n        log(\"Fetching final version of the document...\");\r\n        await updateOutputViewer();\r\n    }\r\n};\r\n\r\n  const handleStop = () => {\r\n    log(\"Stop button pressed. Attempting to stop processing...\");\r\n    processingRef.current = false;\r\n    if (pollingIntervalRef.current) {\r\n        clearInterval(pollingIntervalRef.current);\r\n        pollingIntervalRef.current = null;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <main className=\"h-full flex flex-col p-4 gap-4 bg-background\">\r\n      <header className=\"text-center lg:text-left\">\r\n        <h1 className=\"font-headline text-5xl font-bold text-primary\">\r\n          AutoPDD\r\n        </h1>\r\n        <p className=\"mt-2 text-lg text-muted-foreground\">\r\n          Fill in your PDD automatically using a bundle of provided PDF files\r\n        </p>\r\n      </header>\r\n\r\n      <div className=\"flex-grow grid grid-cols-1 lg:grid-cols-3 gap-4 min-h-0\">\r\n        <div className=\"lg:col-span-1 flex flex-col gap-2 min-h-0\">\r\n          <ControlsPanel\r\n            logs={logs}\r\n            onTemplateUpload={handleTemplateUpload}\r\n            onContextUpload={handleContextUpload}\r\n            contextFiles={contextFiles}\r\n            selectedContextFile={selectedContextFile}\r\n            onContextSelect={handleContextSelect}\r\n            onFillDocument={handleFillDocument}\r\n            isProcessing={isProcessing}\r\n            onStop={handleStop}\r\n          />\r\n          <ContextViewer contextFile={selectedContextFile} />\r\n        </div>\r\n        <div className=\"lg:col-span-2 flex flex-col min-h-0\">\r\n          <TemplateEditor\r\n            content={templateContent}\r\n          />\r\n        </div>\r\n      </div>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default Page;\r\n"],"names":[],"mappings":"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","debugId":null}}]
}