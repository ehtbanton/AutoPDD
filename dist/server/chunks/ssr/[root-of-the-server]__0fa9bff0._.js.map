{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 71, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/anton/source/repos/AutoPDD/src/app/actions.ts"],"sourcesContent":["\r\n'use server';\r\n\r\nimport { spawn } from 'child_process';\r\nimport path from 'path';\r\nimport fs from 'fs/promises';\r\nimport { Buffer } from 'buffer';\r\nimport mammoth from \"mammoth\";\r\n\r\n\r\nconst UPLOAD_DIR_TEMPLATE = path.join(process.cwd(), 'src', 'backend', 'pdd_template');\r\nconst UPLOAD_DIR_CONTEXT = path.join(process.cwd(), 'src', 'backend', 'provided_documents', 'prime_road');\r\nconst UPLOAD_DIR_OUTPUT = path.join(process.cwd(), 'src', 'backend', 'auto_pdd_output');\r\nconst OUTPUT_FILE_NAME = 'AutoPDD_prime_road.docx';\r\n\r\nasync function ensureDir(dir: string) {\r\n    try {\r\n        await fs.access(dir);\r\n    } catch (error) {\r\n        await fs.mkdir(dir, { recursive: true });\r\n    }\r\n}\r\n\r\nasync function cleanDir(dir: string) {\r\n    try {\r\n        const files = await fs.readdir(dir);\r\n        for (const file of files) {\r\n            await fs.unlink(path.join(dir, file));\r\n        }\r\n    } catch (error) {\r\n        // Directory might not exist, which is fine\r\n    }\r\n}\r\n\r\nexport async function uploadTemplateFile(fileName: string, fileContentBase64: string) {\r\n    await ensureDir(UPLOAD_DIR_TEMPLATE);\r\n    await cleanDir(UPLOAD_DIR_TEMPLATE);\r\n    await ensureDir(UPLOAD_DIR_OUTPUT);\r\n    await cleanDir(UPLOAD_DIR_OUTPUT);\r\n\r\n    const templateFilePath = path.join(UPLOAD_DIR_TEMPLATE, fileName);\r\n    const buffer = Buffer.from(fileContentBase64, 'base64');\r\n    await fs.writeFile(templateFilePath, buffer);\r\n\r\n    // Also create the initial output file by copying the template\r\n    const outputFilePath = path.join(UPLOAD_DIR_OUTPUT, OUTPUT_FILE_NAME);\r\n    await fs.copyFile(templateFilePath, outputFilePath);\r\n}\r\n\r\nexport async function uploadContextFile(fileName: string, fileContentBase64: string) {\r\n    await ensureDir(UPLOAD_DIR_CONTEXT);\r\n    const filePath = path.join(UPLOAD_DIR_CONTEXT, fileName);\r\n    await fs.writeFile(filePath, Buffer.from(fileContentBase64, 'base64'));\r\n}\r\n\r\n\r\nexport async function runPythonBackend(): Promise<ReadableStream<Uint8Array>> {\r\n    \r\n    await ensureDir(UPLOAD_DIR_OUTPUT);\r\n\r\n    const stream = new ReadableStream({\r\n        start(controller) {\r\n            const pythonScriptPath = path.join(process.cwd(), 'src', 'backend', 'src', '___main.py');\r\n            \r\n            const pythonProcess = spawn('python', [pythonScriptPath], {\r\n                cwd: path.join(process.cwd(), 'src', 'backend', 'src'),\r\n                shell: true \r\n            });\r\n\r\n            pythonProcess.stdout.on('data', (data) => {\r\n                controller.enqueue(new TextEncoder().encode(data.toString()));\r\n            });\r\n\r\n            pythonProcess.stderr.on('data', (data) => {\r\n                controller.enqueue(new TextEncoder().encode(`ERROR: ${data.toString()}`));\r\n            });\r\n\r\n            pythonProcess.on('close', (code) => {\r\n                if (code !== 0) {\r\n                    controller.enqueue(new TextEncoder().encode(`\\nPython script exited with code ${code}`));\r\n                }\r\n                controller.close();\r\n            });\r\n\r\n            pythonProcess.on('error', (err) => {\r\n                controller.error(err);\r\n            });\r\n        }\r\n    });\r\n\r\n    return stream;\r\n}\r\n\r\nexport async function getOutputFileAsHtml(): Promise<string | null> {\r\n    const outputFilePath = path.join(UPLOAD_DIR_OUTPUT, OUTPUT_FILE_NAME);\r\n    try {\r\n        await fs.access(outputFilePath); // Check if file exists\r\n        const arrayBuffer = await fs.readFile(outputFilePath);\r\n        const result = await mammoth.convertToHtml({ buffer: arrayBuffer });\r\n        return result.value;\r\n    } catch (error) {\r\n        console.error(\"Error reading or converting output file:\", error);\r\n        return null; // Return null if file doesn't exist or there's an error\r\n    }\r\n}\r\n\r\nexport async function getExistingContextFiles(): Promise<{ name: string; content: string }[]> {\r\n    try {\r\n        await ensureDir(UPLOAD_DIR_CONTEXT);\r\n        const files = await fs.readdir(UPLOAD_DIR_CONTEXT);\r\n        const contextFiles = [];\r\n        for (const file of files) {\r\n            if (path.extname(file).toLowerCase() === '.pdf') {\r\n                const filePath = path.join(UPLOAD_DIR_CONTEXT, file);\r\n                const fileContent = await fs.readFile(filePath);\r\n                contextFiles.push({\r\n                    name: file,\r\n                    content: fileContent.toString('base64'),\r\n                });\r\n            }\r\n        }\r\n        return contextFiles;\r\n    } catch (error) {\r\n        console.error(\"Error reading context files:\", error);\r\n        return [];\r\n    }\r\n}\r\n\r\nexport async function getTemplateName(): Promise<string | null> {\r\n    try {\r\n        await ensureDir(UPLOAD_DIR_TEMPLATE);\r\n        const files = await fs.readdir(UPLOAD_DIR_TEMPLATE);\r\n        const templateFile = files.find(file => path.extname(file).toLowerCase() === '.docx');\r\n        return templateFile || null;\r\n    } catch (error) {\r\n        console.error(\"Error reading template directory:\", error);\r\n        return null;\r\n    }\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 231, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/anton/source/repos/AutoPDD/.next-internal/server/app/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {runPythonBackend as '00cfb517512251981168cbdf3aa7258d3fc197b6f8'} from 'ACTIONS_MODULE0'\nexport {uploadContextFile as '60cde9cf663f767b32cc49f189b75699ade90b2609'} from 'ACTIONS_MODULE0'\nexport {uploadTemplateFile as '608f32c6a6e4ccd54122520ca73abf9e052e3df385'} from 'ACTIONS_MODULE0'\nexport {getOutputFileAsHtml as '008c40447e4d47d9287948c9947a8fa162ffce98ec'} from 'ACTIONS_MODULE0'\nexport {getExistingContextFiles as '0077ef5d2bfc39a74144707ab4acfa7fa66ac81565'} from 'ACTIONS_MODULE0'\nexport {getTemplateName as '00c827467aab34abdf3df0d4ce4b07971977600b82'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 298, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/anton/source/repos/AutoPDD/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAoR,GACjT,kDACA","debugId":null}},
    {"offset": {"line": 312, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/anton/source/repos/AutoPDD/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAgQ,GAC7R,8BACA","debugId":null}},
    {"offset": {"line": 326, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}